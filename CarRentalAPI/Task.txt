Advanced Homework: Car Rental API (Rentals Only)
?? Context
You're building the rental logic for an existing Car Rental system. Car and Customer data already exists and is preloaded.

?? Concepts Practiced
- Minimal API
- AutoMapper or Mapperly (students choose)
- DTOs and advanced mapping
- Business logic in API
- In-memory data or EF Core (your choice)
- Custom middleware for validation or logging (optional)

?? Predefined Models (Given)
public class Car
{
    public int Id { get; set; }
    public string Make { get; set; } = default!;
    public string Model { get; set; } = default!;
    public int Year { get; set; }
    public decimal DailyRate { get; set; }
    public bool IsAvailable { get; set; }
}

public class Customer
{
    public int Id { get; set; }
    public string FullName { get; set; } = default!;
    public string Email { get; set; } = default!;
}

?? Students Must Create - Entities
public class Rental
{
    public int Id { get; set; }
    public int CarId { get; set; }
    public int CustomerId { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal TotalPrice { get; set; }
}

?? Students Must Create - DTOs
public class CreateRentalDto
{
    public int CarId { get; set; }
    public int CustomerId { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
}

public class RentalDto
{
    public int Id { get; set; }
    public string CarInfo { get; set; } = default!;
    public string CustomerName { get; set; } = default!;
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public decimal TotalPrice { get; set; }
}


? Mapping
- Create profiles using AutoMapper or Mapperly.
- Map CreateRentalDto ? Rental
- Map Rental ? RentalDto (with CarInfo = Make + Model + Year)

?? Endpoints to Implement
POST /rentals
GET /rentals
GET /rentals/{id}
DELETE /rentals/{id}
POST /rentals logic
- Check if Car exists and is available.
- Calculate TotalPrice using (EndDate - StartDate) * Car.DailyRate
- Mark car as unavailable (if stored in-memory, modify that car).
- Return the created rental (mapped to RentalDto).

?? Bonus Challenges (Optional)
1. Custom Middleware – log each rental operation.
2. Validation – using minimal custom logic or FluentValidation.
3. GET /rentals?customerId= – filter by customer.
4. Unit tests for mapping or business logic (stretch goal).

?? Submission
- GitHub repo or ZIP
- README with:
  - Which mapper used
  - Sample request/response for /rentals
  - How to run the app
